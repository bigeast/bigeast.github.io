Hints for http://www.pythonchallenge.com[Python Challenge]

=== http://www.pythonchallenge.com/pc/def/0.html[0]
2**38


=== http://www.pythonchallenge.com/pc/def/274877906944.html[1]
rot13

=== http://www.pythonchallenge.com/pc/def/ocr.html[2]
**page source** means the current web page source.
Open the html page source and note the comments.

=== http://www.pythonchallenge.com/pc/def/equality.html[3]
Note the page title. It's a hint!
Need to view the page source as above.

=== http://www.pythonchallenge.com/pc/def/linkedlist.php[4]
The page title says "follow the chain", so click the image

Need to get the page by program, and extract a number from the source.

**Brillient problem!!** Follow the number and you'll get a page that doesn't has a number in it, but since the we write a loop to append the number to the url, this time we append **NULL**.

The answer is lay in the page that has no number in it. It's a cyclic list and you'll get the page again and again, the length of the cycle is 194.

[white]#nothing, 6711, ..., 66831 and then will get the answer peak#

=== http://www.pythonchallenge.com/pc/def/peak.html[5]
peak hell sounds familiar?
Download a file whose name is in the source code and unpickle it.

Then! The unpicked list is a character map!

=== http://www.pythonchallenge.com/pc/def/channel.html[6]
The comment of the page source only has "zip", I googled and download channel.zip. Unzip it and there are many _num.txt_ files in it, other than a _readme_ file with two hints.

It seems similar with **linkedlist** problem, but the last file in the list says "Collect the comments."

Need to know that the comments here is in the zipfile, i.e. each file in the zip file can have a comment, here we need to collect these comments following the list order and will got the answer, say XXX.

The final answer is the small characters which forms XXX!!! Amazing, I googled a lot!

[white]#hockey oxygen#

=== http://www.pythonchallenge.com/pc/def/oxygen.html[7]
Absolutely nothing other than an image with strange blocks in it. Note that the color are all gray, can the gray value represent a ascii value?

Need PIL library.

[source, Python]
import PIL
img = PIL.Image.open('oxygen.png')
pix = img.load() # pix is a list of (R,G,B,A), which can be accessed by pix[x,y]
print img.size # (width, height)
[pix[x,img.size(1)/2] for x in xrange(30)] # print the RGB of the central line to see the block size in pixel, which is 7 pixel per width block, except the first block whose width is 5 pixsels
res = [chr(pix[4,47][0])] + [chr(pix[5+7*i,47][0]) for i in xrange(86)]
''.join(res) # not the final answer, but a hint, just follow it!


=== http://www.pythonchallenge.com/pc/def/integrity.html[8]
Follow the link in the image. username and password can be obtained by decompress the two strings in source page by bz2.

Look at the strings' header, and compare them with .bz2 file header:

[source, bash]
$hexdump -c 10 -C test.bz2

[source, python]
import bz2
un = 'BZh91AY&SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07<]\xc9\x14\xe1BA\x06\xbe\x084'
pw = 'BZh91AY&SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13<]\xc9\x14\xe1BBP\x91\xf08'
bz2.decompress(un)
bz2.decompress(pw)

[white]#username:huge password:file#

=== http://www.pythonchallenge.com/pc/return/good.html[9]
Download the image _good.jpg_, manipulate it accroding to comments in the page source, that is, draw lines using ImageDraw module from library PIL.

[white]#cow, bull#

=== http://www.pythonchallenge.com/pc/return/bull.html[10]
1, 11, 21, 1211, 111221
1211 -> 111221
1'1' 1'2' 2'1' -> 111221

[source, python]
res='1'
for i in xrange(31):
    next_str = ""
    lenr = len(res)
    pos = 0
    idx = 0
    while pos < lenr:
        cnt = 0
        while pos < lenr and res[pos] == res[idx]:
            cnt += 1
            pos += 1
        next_str += str(cnt) + res[idx]
        idx = pos
    if i == 30:
        print len(res)
    res = next_str

=== http://www.pythonchallenge.com/pc/return/5808.html[11]
Another image manipulatation problem.

This time more advanced pixel access techniques are required. You'll find numpy is very helpfull.

[source, Python]
from PIL import Image, ImageDraw
import numpy as np
img = Image.open('cave.jpg')
pdata = np.asarray(img)
w,h = img.size
odd = [( 0,0,0 ) * (w/2)] * h
even = [( 0,0,0 ) * (w/2)] * h
for i in xrange(480):
    odd[i] = pdata[i][::2] if i%2==0 else pdata[i][1::2]
    even[i] = pdata[i][::2] if i%2==1 else pdata[i][1::2]
odd = np.array(odd)
even = np.array(even)
Image.fromarray(odd).show()
Image.fromarray(even).show()

=== http://www.pythonchallenge.com/pc/return/evil.html[12]
I'll never solve it all by my self! It's just so evil!

You need to notice the image file name, why it's _evil1.jpg_ rather than just _evil.jpg_? So you'll try if evil2.jpg exists. Turns out evil2.jpg says "rot jpg - _.gfx". Then try to download evil2.gfx which can't be decoded directly.

[source, bash]
$hexdump -n 100 -C evil2.gfx
00000000  ff 89 47 89 ff d8 50 49  50 d8 ff 4e 46 4e ff e0  |..G...PIP..NFN..|
00000010  47 38 47 e0 00 0d 37 0d  00 10 0a 61 0a 10 4a 1a  |G8G...7....a..J.|
00000020  40 1a 4a 46 0a 01 0a 46  49 00 f0 00 49 46 00 00  |@.JF...FI...IF..|
00000030  00 46 00 00 e7 00 00 01  0d 00 0d 01 01 49 00 49  |.F...........I.I|
00000040  01 01 48 00 48 01 00 44  01 44 00 b4 52 00 52 b4  |..H.H..D.D..R.R.|
00000050  00 00 00 00 00 b4 00 01  00 b4 00 01 04 01 00 00  |................|
00000060  90 02 40 00                                       |..@.|
00000064
$hexdump -n 100 -C evil2.gfx | cut -d'|' -f2 | xargs | sed -e 's/ //g' -e 's/...../&\n/g'
..G..
.PIP.
.NFN.
.G8G.
..7..
..a..
J.@.J
F...F
I...I
F...F
...

So there are five images in _evil2.gfx_.

[source, Python]
from PIL import Image, ImageDraw
import numpy as np
data = open('evil2.gfx','rb')
img = [None] * 5
img[0] = open('img0.jfif','wb')
img[1] = open('img1.png','wb')
img[2] = open('img2.gif','wb')
img[3] = open('img3.png','wb')
img[4] = open('img4.jfif','wb')
for i in xrange(13515):
    img[0].write(data.read(1))
    img[1].write(data.read(1))
    img[2].write(data.read(1))
    img[3].write(data.read(1))
    img[4].write(data.read(1))
for i in xrange(5):
    img[i].close()

Each image has several characters in it, concat them will get the answer.

Note that the third image is damaged, nevertheless we can still get the right answer.

[white]#disproportional#

=== http://www.pythonchallenge.com/pc/return/disproportional.html[13]
No idea. Cheat with http://intelligentgeek.blogspot.jp/2006/03/python-challenge-13-level-13-shows.html[This].

xmlrpclib is needed.

=== http://www.pythonchallenge.com/pc/return/italy.html[14]
Spiral matrix.
Easy and easy to lose time in these problem!!

[source, Python]
from PIL import Image
import numpy as np
img = Image.open('wire.png')
pdata = np.asarray(img)
w, h = img.size
#deimg = [ [0 for i in range(100)] for j in range(100)]
for i in range(100):
    deimg[i] = pdata[0][100*i: 100*i+100]
# Image.fromarray(np.array(deimg)).show() # bit.html says "you took the wrong curve."
direct = [(0, 1), (1, 0), (0, -1), (-1, 0)]
deimg_spiral = [ [0 for i in range(100)] for j in range(100)]
pos = 0
x, y = 0, 0
for i in range(100, -1, -2):
    for d in range(4):
        for j in range(i-1):
            deimg_spiral[x][y] = pdata[0][pos]
            pos += 1
            x += direct[d][0]
            y += direct[d][1]
    x += 1
    y += 1
Image.fromarray(np.array(deimg_spiral)).show()

[white]#cat, and its name is uzi. you'll hear from him later.#

=== http://www.pythonchallenge.com/pc/return/uzi.html[15]
It's hard without search.

First point, you have to notice the next month has 29 days, so it's a leap year.

Python datetime modular is for rescue. And find the year 1756, then google a lot and find what happend in 1756-01-27

[source, Python]
import datetime
for year in range(1996,1582,-20):
    if datetime.date(year, 1, 1).weekday() == 3:   # 3=Thursday
        print year,

=== http://www.pythonchallenge.com/pc/return/mozart.html[16]
Cheated.:(
Use GMIP to magnify the image and see the sticks in pixsel:
- Press _'O'_ to open color pick tool.
- _Shift + Left Mouse_ to see the color value.
- Index means index in palette

[source, Python]
from PIL import Image, ImageDraw
img = Image.open('mozart.gif')
w,h = img.size
bars = []
for j in range(h):
    for i in range(w - 5):
        if img.getpixel((i,j)) == 195 and img.getpixel((i+4,j)) == 195:
            bars.append((i,j))
collect = Image.new(img.mode, (w*2, h), 0)
collect.palette = img.palette
for j in range(h):
    for i in range(w):
        collect.putpixel((i + w - bars[j][0], j), img.getpixel((i,j)))
collect.show()

=== http://www.pythonchallenge.com/pc/return/romance.html[17]
'is it the 26th already? call his father and inform him that "the flowers are on their way". he\'ll understand.'
