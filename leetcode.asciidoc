//:source-highlighter: pygments
//:pygments-style: manni
== Leetcode
* https://leetcode.com/problems/maximum-gap[Maximum Gap] *一个无序的数组，在线性时间内找到排好序后，相邻两个元素之间最大的差值。*

* https://leetcode.com/problems/merge-two-sorted-lists[Merge Two Sorted Lists] *合并两个有序的链表。*

算法很清楚，主要是看怎么实现。如果用p指向要返回的列表当前位置，注意每次更新的时候是先改变p->next，然后p=p->next。

[source, CPP, numbered]
/********************************
 * Author:			bigeast
 * Time:			2015-03-14
 * Description:		AC.
 ********************************/
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};
class Solution {
public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
		struct ListNode res(0), *p = &res;
		while(l1 != NULL && l2 != NULL)
		{
			if(l1->val < l2->val)
			{
				p->next = l1;
				l1 = l1->next;
			}
			else
			{
				p->next = l2;
				l2 = l2->next;
			}
			p = p->next;
		}
		if(l1 == NULL)
		{
			p ->next = l2;
		}
		else if(l2 == NULL)
		{
			p ->next = l1;
		}
		return res.next;
    }
};

=== https://leetcode.com/problems/search-for-a-range[Search for a range] 

**有序数组里的 lower_bound 和 upper_bound**

[line-through]#突然发现自己好像还不会这个。想了一下也没想出来，应该是二分查找稍微变形一下#

盯着代码看，就想出来了。找上下界与一般二分查找的不同之处是，在找到目标元素后是否还继续寻找。

[source, CPP]
class Solution {
	public:
		int lower_bound(int A[], int n, int target)
		{
			int lo = 0, hi = n - 1, mid;
			while(lo <= hi)
			{
				mid = lo + (hi - lo)/2;
				if(A[mid] == target)
				{
					if(mid == 0 || A[mid - 1] < A[mid])
					{
						return mid;
					}
					else
					{
						hi = mid - 1;
					}
				}
				else if(A[mid] > target)
				{
					hi = mid - 1;
				}
				else
				{
					lo = mid + 1;
				}
			}
			return -1;
		}
		int upper_bound(int A[], int n, int target)
		{
			int lo = 0, hi = n - 1, mid;
			while(lo <= hi)
			{
				mid = lo + (hi - lo)/2;
				if(A[mid] == target)
				{
					if(mid == n - 1 || A[mid + 1] > A[mid])
					{
						return mid;
					}
					else
					{
						lo = mid + 1;
					}
				}
				else if(A[mid] > target)
				{
					hi = mid - 1;
				}
				else
				{
					lo = mid + 1;
				}
			}
			return -1;
		}
		vector<int> searchRange(int A[], int n, int target) {
			vector<int> range;
			range.push_back(lower_bound(A, n, target));
			range.push_back(upper_bound(A, n, target));
			return range;
		}
};

=== 链表操作
* https://leetcode.com/problems/reverse-linked-list-ii/[reverse-linked-list-ii]

* https://leetcode.com/problems/swap-nodes-in-pairs/[swap-nodes-in-pairs]

* https://leetcode.com/problems/reverse-nodes-in-k-group/[reverse-nodes-in-k-group]

=== 连续整数
* https://leetcode.com/problems/first-missing-positive/[first-missing-positive]

* https://leetcode.com/problems/longest-consecutive-sequence/[longest-consecutive-sequence]

* https://leetcode.com/problems/maximum-gap/[maximum-gap]

O(n)时空复杂度下，找到一个无序数组排好序后相邻元素的最大差值。挺有意思，自己想想。

=== next_permutation
* https://leetcode.com/problems/next-permutation/[next-permutation]
	** STL中现成函数 'next_permutation'
	** 手动实现时，额，方法又忘了。

=== 两个有序数组的中值
* https://leetcode.com/problems/median-of-two-sorted-arrays/[median-of-two-sorted-arrays]

* http://articles.leetcode.com/2011/01/find-k-th-smallest-element-in-union-of.html[答案说明]

=== 子集和DFS
* https://leetcode.com/problems/two-sum/[two-sum]

* https://leetcode.com/problems/3sum/[3sum]

* https://leetcode.com/problems/4sum/[4sum]

* https://leetcode.com/problems/generate-parentheses/[generate-parentheses]

* https://leetcode.com/problems/palindrome-partitioning/[palindrome-partitioning]

=== DP
* https://leetcode.com/problems/longest-palindromic-substring/[longest-palindromic-substring]

=== 其它
* https://leetcode.com/problems/palindrome-number/[palindrome-number] *判断是否是回文数字，不能使用额外的空间。*
